using Business.Dtos;
using Business.Factories;
using Business.Interfaces;
using Business.Models;
using Data.Contexts;
using Data.Entities;
using Data.Interfaces;
using Data.Repositories;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using System.Threading.Tasks;

namespace Business.Services;

public class ProjectService(IProjectRepository projectRepository) : IProjectService
{
    private readonly IProjectRepository _projectRepository = projectRepository;

    public async Task<bool> AlreadyExistsAsync(Expression<Func<ProjectEntity, bool>> expression)
    {
        /* Generated by chatgpt 4o, was unsure of what method to use here but this was the right one to refer to AlreadyExistsAsync
         * Later we did excactly same method during the lesson */
        return await _projectRepository.AlreadyExistsAsync(expression);
    }

    public async Task<Project> CreateProjectAsync(ProjectRegistrationForm form)
    {
        var entity = await _projectRepository.GetAsync(x => x.ProjectName == form.ProjectName);

        entity ??= await _projectRepository.CreateAsync(ProjectFactory.Create(form));

        return ProjectFactory.Create(entity);
    }

    public async Task<bool> DeleteProjectAsync(int id)
    {
        var result = await _projectRepository.DeleteAsync(x => x.ProjectId == id);
        return result;
    }

    public async Task<IEnumerable<Project>> GetAllProjectsAsync()
    {
        var entities = await _projectRepository.GetAllAsync();
        try
        {
            var projects = entities.Select(ProjectFactory.Create);
            return projects;
        }
        catch (Exception ex)
        {
            Debug.Write(ex.Message);
            return null!;
        }
    }

    public async Task<ProjectEntity> GetProjectAsync(Expression<Func<ProjectEntity, bool>> expression)
    {
        var entity = await _projectRepository.GetAsync(expression);
        try
        {
            var project = ProjectFactory.Create(entity);
        }
        catch (Exception ex)
        {
            Debug.Write($"{ex.Message}");
            return null!;
        }

        return entity ?? null!;
    }

    public async Task<Project> UpdateProjectAsync(ProjectUpdateForm form) 
    {
        /* Chatgpt 4o help me fix/generate code for the method by suggestion i should create updatedentity and then the entity,
         * also told me to match the projectid in updatesync and finally return the new project */
        try
        {
            var updatedEntity = ProjectFactory.Create(form);

            var entity = await _projectRepository.UpdateAsync(
                p => p.ProjectId == form.ProjectId,
                updatedEntity
                );

            if (entity == null) { return null!; }

            return new Project
            {
                ProjectId = entity.ProjectId,
                ProjectName = entity.ProjectName,
                StartDate = entity.StartDate,
                EndDate = entity.EndDate,
                ProjectManager = entity.ProjectManager,
                CustomerId = entity.CustomerId,
                TotalCost = entity.TotalCost,
                Status = entity.Status
            };
        }
        catch (Exception ex)
        {
            Debug.Write($"{ex.Message}");
            return null!;
        }
    }
}
