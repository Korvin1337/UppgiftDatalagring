using Business.Dtos;
using Business.Factories;
using Business.Interfaces;
using Business.Models;
using Data.Contexts;
using Data.Entities;
using Data.Interfaces;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using System.Threading.Tasks;

namespace Business.Services;

public class CustomerService(ICustomerRepository customerRepository) : ICustomerService
{
    private readonly ICustomerRepository _customerRepository = customerRepository;

    public async Task<bool> AlreadyExistsAsync(Expression<Func<CustomerEntity, bool>> expression)
    {
        /* Generated by chatgpt 4o, was unsure of what method to use here but this was the right one to refer to AlreadyExistsAsync
         * Later we did excactly same method during the lesson */
        return await _customerRepository.AlreadyExistsAsync(expression);
    }

    public async Task<Customer> CreateCustomerAsync(CustomerRegistrationForm form)
    {
        var entity = await _customerRepository.GetAsync(x => x.Name == form.Name);

        entity ??= await _customerRepository.CreateAsync(CustomerFactory.Create(form));

        return CustomerFactory.Create(entity);
    }

    public async Task<bool> DeleteCustomerAsync(int id)
    {
        var result = await _customerRepository.DeleteAsync(x => x.CustomerId == id);
        return result;
    }

    public async Task<IEnumerable<Customer>> GetAllCustomersAsync()
    {
        var entities = await _customerRepository.GetAllAsync();
        try
        {
            var customers = entities.Select(CustomerFactory.Create);
            return customers;
        }
        catch (Exception ex)
        {
            Debug.Write(ex.Message);
            return null!;
        }
    }

    public async Task<CustomerEntity> GetCustomerAsync(Expression<Func<CustomerEntity, bool>> expression)
    {
        var entity = await _customerRepository.GetAsync(expression);
        try
        {
            var customer = CustomerFactory.Create(entity);
        }
        catch (Exception ex)
        {
            Debug.Write($"{ex.Message}");
            return null!;
        }

        return entity ?? null!;
    }

    public async Task<Customer> UpdateCustomerAsync(CustomerUpdateForm form)
    {
        /* Chatgpt 4o help me fix/generate code for the method by suggestion i should create updatedentity and then the entity,
         * also told me to match the customerid in updatesync and finally return the new customer */
        try
        {
            var updatedEntity = CustomerFactory.Create(form);

            var entity = await _customerRepository.UpdateAsync(
                c => c.CustomerId == form.CustomerId,
                updatedEntity
                );

            if (entity == null) { return null!; }

            return new Customer
            {
                CustomerId = entity.CustomerId,
                Name = entity.Name,
                Email = entity.Email
            };
        }
        catch (Exception ex)
        {
            Debug.Write($"{ex.Message}");
            return null!;
        }
    }
}
