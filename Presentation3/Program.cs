using Business.Helpers;
using Business.Interfaces;
using Business.Services;
using Business.Factories;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Presentation3.Interfaces;
using Presentation3.Services;
using Data.Contexts;
using Microsoft.EntityFrameworkCore;
using Data.Interfaces;
using Data.Repositories;

var host = Host.CreateDefaultBuilder()
    .ConfigureServices(services =>
    {
        /* Adding the context for database, adding repositories generated by chatgpt 4o */
        services.AddDbContext<DataContext>(options =>
        options.UseSqlServer(@"Data Source=(LocalDB)\MSSQLLocalDB;AttachDbFilename=G:\projects\EC2\C#\UppgiftDatalagring\Data\Databases\localdb_connect.mdf;Integrated Security=True;Connect Timeout=30"));
        services.AddTransient<ICustomerRepository, CustomerRepository>();
        services.AddTransient<IProjectRepository, ProjectRepository>();
        services.AddTransient<ICustomerService, CustomerService>();
        services.AddTransient<IProjectService, ProjectService>();
        services.AddTransient<ErrorLogger>();
        services.AddTransient<InputHandler>();
        services.AddTransient<MessageHandler>();
        services.AddTransient<ConsoleWrapper>();
        services.AddTransient<CustomerInputService>();
        services.AddTransient<ProjectInputService>();
        services.AddTransient<CustomerFactory>();
        services.AddTransient<ProjectFactory>();
        services.AddTransient<IMenuDialogs, MenuDialogs>();
    }).Build();

using var scope = host.Services.CreateScope();
var mainMenu = scope.ServiceProvider.GetRequiredService<IMenuDialogs>();

await mainMenu.RunMenu();
